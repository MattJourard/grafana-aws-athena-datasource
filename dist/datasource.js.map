{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","AwsAthenaDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","id","defaultRegion","jsonData","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","status","message","title","datasourceRequest","method","from","range","valueOf","toString","to","queries","then","res","forEach","result","results","isEmpty","r","series","push","target","s","datapoints","points","tables","table","columns","rows","map","refId","datasourceId","queryType","region","input","queryExecutionId","replace","scopedVars"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class AwsAthenaDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.data.range.from.valueOf().toString(),\n        to: options.data.range.to.valueOf().toString(),\n        queries: options.data.targets,\n      }\n    }).then(result => {\n      let res = [];\n      _.forEach(result.data.results, r => {\n        if (!_.isEmpty(r.series)) {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n          })\n        }\n        if (!_.isEmpty(r.tables)) {\n          _.forEach(r.tables, t => {\n            let table = new TableModel()\n            table.columns = t.columns\n            table.rows = t.rows\n            res.push(table);\n          })\n        }\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: target.type || 'timeserie',\n        region: target.region || this.defaultRegion,\n        input: {\n          queryExecutionId: this.templateSrv.replace(target.queryExecutionId, options.scopedVars)\n        }\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n}\n"]}