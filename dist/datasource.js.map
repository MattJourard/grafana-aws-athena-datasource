{"version":3,"sources":["../src/datasource.js"],"names":["_","TableModel","AwsAthenaDatasource","instanceSettings","$q","backendSrv","templateSrv","timeSrv","type","url","name","id","defaultRegion","jsonData","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","doRequest","doMetricQueryRequest","region","then","status","message","title","catch","err","datasourceRequest","method","from","range","valueOf","toString","to","queries","res","forEach","result","results","isEmpty","r","series","push","target","s","datapoints","points","tables","table","columns","rows","map","refId","datasourceId","queryType","format","replace","scopedVars","timestampColumn","valueColumn","legendFormat","input","queryExecutionId","namedQueryNamesQuery","match","namedQueryQueryQuery","pattern","queryExecutionIdsQuery","limit","parseInt","subtype","parameters","timeRange","extend","transformSuggestDataFromTable","suggestData","text","v","value"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport TableModel from 'app/core/table_model';\n\nexport class AwsAthenaDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv, timeSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.id = instanceSettings.id;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.timeSrv = timeSrv;\n  }\n\n  query(options) {\n    let query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      data: query\n    });\n  }\n\n  testDatasource() {\n    return this.doMetricQueryRequest('named_query_names', {\n      region: this.defaultRegion,\n    }).then(res => {\n      return this.q.when({ status: \"success\", message: \"Data source is working\", title: \"Success\" });\n    }).catch(err => {\n      return { status: \"error\", message: err.message, title: \"Error\" };\n    });\n  }\n\n  doRequest(options) {\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: options.data.range.from.valueOf().toString(),\n        to: options.data.range.to.valueOf().toString(),\n        queries: options.data.targets,\n      }\n    }).then(result => {\n      let res = [];\n      _.forEach(result.data.results, r => {\n        if (!_.isEmpty(r.series)) {\n          _.forEach(r.series, s => {\n            res.push({ target: s.name, datapoints: s.points });\n          })\n        }\n        if (!_.isEmpty(r.tables)) {\n          _.forEach(r.tables, t => {\n            let table = new TableModel()\n            table.columns = t.columns\n            table.rows = t.rows\n            res.push(table);\n          })\n        }\n      })\n\n      result.data = res;\n      return result;\n    });\n  }\n\n  buildQueryParameters(options) {\n    let targets = _.map(options.targets, target => {\n      return {\n        refId: target.refId,\n        hide: target.hide,\n        datasourceId: this.id,\n        queryType: 'timeSeriesQuery',\n        format: target.type || 'timeserie',\n        region: this.templateSrv.replace(target.region, options.scopedVars) || this.defaultRegion,\n        timestampColumn: target.timestampColumn,\n        valueColumn: target.valueColumn,\n        legendFormat: target.legendFormat || '',\n        input: {\n          queryExecutionId: this.templateSrv.replace(target.queryExecutionId, options.scopedVars)\n        }\n      };\n    });\n\n    options.targets = targets;\n    return options;\n  }\n\n  metricFindQuery(query) {\n    let region;\n\n    let namedQueryNamesQuery = query.match(/^named_query_names\\(([^\\)]+?)\\)/);\n    if (namedQueryNamesQuery) {\n      region = namedQueryNamesQuery[1];\n      return this.doMetricQueryRequest('named_query_names', {\n        region: this.templateSrv.replace(region),\n      });\n    }\n\n    let namedQueryQueryQuery = query.match(/^named_query_queries\\(([^,]+?),\\s?(.+)\\)/);\n    if (namedQueryQueryQuery) {\n      region = namedQueryQueryQuery[1];\n      let pattern = namedQueryQueryQuery[2];\n      return this.doMetricQueryRequest('named_query_queries', {\n        region: this.templateSrv.replace(region),\n        pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n      });\n    }\n\n    let queryExecutionIdsQuery = query.match(/^query_execution_ids\\(([^,]+?),\\s?([^,]+?),\\s?(.+)\\)/);\n    if (queryExecutionIdsQuery) {\n      region = queryExecutionIdsQuery[1];\n      let limit = queryExecutionIdsQuery[2];\n      let pattern = queryExecutionIdsQuery[3];\n      return this.doMetricQueryRequest('query_execution_ids', {\n        region: this.templateSrv.replace(region),\n        limit: parseInt(this.templateSrv.replace(limit), 10),\n        pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n      });\n    }\n\n    return this.$q.when([]);\n  }\n\n  doMetricQueryRequest(subtype, parameters) {\n    var range = this.timeSrv.timeRange();\n    return this.backendSrv.datasourceRequest({\n      url: '/api/tsdb/query',\n      method: 'POST',\n      data: {\n        from: range.from.valueOf().toString(),\n        to: range.to.valueOf().toString(),\n        queries: [\n          _.extend(\n            {\n              refId: 'metricFindQuery',\n              datasourceId: this.id,\n              queryType: 'metricFindQuery',\n              subtype: subtype,\n            },\n            parameters\n          ),\n        ],\n      }\n    }).then(r => {\n      return this.transformSuggestDataFromTable(r.data);\n    });\n  }\n\n  transformSuggestDataFromTable(suggestData) {\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\n      return {\n        text: v[0],\n        value: v[1],\n      };\n    });\n  }\n}\n"]}